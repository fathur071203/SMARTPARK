import torch
import cv2
import pathlib
import pickle
import datetime
import time
from openpyxl import Workbook, load_workbook
from pathlib import WindowsPath


# Fix for PosixPath issue
pathlib.PosixPath = WindowsPath

# Path model, posisi parkir, dan file Excel
pt_model_path = 'model/yolov5.pt'  # Ganti sesuai path model Anda
carpark_positions_path = "CarParkPos"  # Ganti sesuai path posisi parkir Anda
excel_path = 'fpsyolo5.xlsx'  # Path file Excel untuk menyimpan data FPS
output_video_path = 'videohasilyolov5.avi'  # Path untuk menyimpan video output

# Inisialisasi file Excel jika belum ada
try:
    wb = load_workbook(excel_path)
except FileNotFoundError:
    wb = Workbook()
    ws = wb.active
    ws.append(["Timestamp", "FPS"])
    wb.save(excel_path)

# Load YOLO model
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model = torch.hub.load('ultralytics/yolov5', 'custom', path=pt_model_path, force_reload=True).to(device)

# Filter classes (0 and "mobil")
class_names = {0: "mobil"}  # Pastikan class ini sesuai dengan model Anda
target_classes = [0]  # Sesuaikan dengan kebutuhan Anda

# Load posisi parkir
with open(carpark_positions_path, 'rb') as f:
    posList = pickle.load(f)

# Fungsi untuk mengecek ketersediaan parkir
def checkParkingSpace(frame, car_boxes):
    width, height = 15, 30
    spaceCounter = 0
    free_slots = []

    for i, pos in enumerate(posList):
        x, y = pos
        found = False
        for car_box in car_boxes:
            car_x, car_y, car_w, car_h = car_box
            if car_x < x + width and car_x + car_w > x and car_y < y + height and car_y + car_h > y:
                color = (0, 0, 255)
                found = True
                break
        if not found:
            color = (0, 255, 0)
            spaceCounter += 1
            free_slots.append(i + 1)

        cv2.rectangle(frame, (x, y), (x + width, y + height), color, 2)
        cv2.putText(frame, f"Slot {i + 1}", (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)

    timestamp = datetime.datetime.now().strftime("%d-%m-%Y %H:%M:%S")
    cv2.putText(frame, f'Time: {timestamp}', (10, 25), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)
    cv2.putText(frame, f'Free: {spaceCounter}/{len(posList)}', (10, 50), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)
    cv2.putText(frame, f'Slot: {str(free_slots)}', (10, 75), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)

# Video input
video_path = 'Video/Video 2.mp4'  # Ganti dengan path video Anda
cap = cv2.VideoCapture(video_path)

# Check if the video file is opened successfully
if not cap.isOpened():
    print("Error: Cannot open video file.")
    exit()

# Video output
frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
fps_video = int(cap.get(cv2.CAP_PROP_FPS))
fourcc = cv2.VideoWriter_fourcc(*'XVID')
out = cv2.VideoWriter(output_video_path, fourcc, fps_video, (frame_width, frame_height))

# FPS calculation
start_time = time.time()
current_time = start_time
frame_count = 0
fps_list = []
fps = 0.0

# Process video
while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    # Run inference
    results = model(frame)

    # Parse results
    car_boxes = []
    detections = results.xyxy[0]  # Get bounding boxes
    for *box, conf, cls in detections.cpu().numpy():
        if int(cls) in target_classes:
            label = class_names.get(int(cls), f"Class {int(cls)}")
            x1, y1, x2, y2 = map(int, box)
            car_boxes.append((x1, y1, x2 - x1, y2 - y1))

            # Draw bounding box and label
            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
            cv2.putText(frame, f"{label} {conf:.2f}", (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

    # Check parking spaces
    checkParkingSpace(frame, car_boxes)

    # Update frame count and calculate FPS
    frame_count += 1
    elapsed_time = time.time() - current_time

    # Perbarui FPS setiap detik
    if elapsed_time >= 1.0:
        fps = frame_count / elapsed_time
        fps_list.append(fps)
        print(f"Live FPS: {fps:.2f}")

        # Tulis FPS ke file Excel
        wb = load_workbook(excel_path)
        ws = wb.active
        ws.append([datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"), fps])
        wb.save(excel_path)

        frame_count = 0
        current_time = time.time()

    # Tambahkan FPS ke frame
    cv2.putText(frame, f'Live FPS: {fps:.2f}', (10, 100), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 1)

    # Display frame
    cv2.imshow("Parking Detection", frame)
    out.write(frame)

    if cv2.waitKey(1) == 27:  # Tekan ESC untuk keluar
        break

# Hitung FPS total
end_time = time.time()
total_time = end_time - start_time
total_fps = sum(fps_list) / len(fps_list) if fps_list else 0
print(f"Total FPS: {total_fps:.2f}")

# Release resources
cap.release()
out.release()
cv2.destroyAllWindows()
